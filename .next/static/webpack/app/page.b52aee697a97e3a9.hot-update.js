"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/stores/walletStore.ts":
/*!***************************************!*\
  !*** ./src/lib/stores/walletStore.ts ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useWalletStore: function() { return /* binding */ useWalletStore; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n\nconst useWalletStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)((set, get)=>({\n        // Initial state\n        isConnected: false,\n        isConnecting: false,\n        walletState: null,\n        error: null,\n        // Actions\n        connect: async ()=>{\n            set({\n                isConnecting: true,\n                error: null\n            });\n            try {\n                var _window_midnight;\n                // Check if Midnight Lace wallet is available\n                if ( false || !((_window_midnight = window.midnight) === null || _window_midnight === void 0 ? void 0 : _window_midnight.mnLace)) {\n                    throw new Error(\"Midnight Lace wallet not found. Please install the extension.\");\n                }\n                const api = window.midnight.mnLace;\n                // Check if already enabled\n                const isEnabled = await api.isEnabled();\n                if (!isEnabled) {\n                    // Request permission\n                    await api.enable();\n                }\n                // Get wallet state\n                const walletState = {\n                    address: \"midnight1234...5678\",\n                    publicKey: null,\n                    chainId: \"midnight-testnet\",\n                    balances: [],\n                    isConnected: true,\n                    isLocked: false\n                };\n                set({\n                    isConnected: true,\n                    isConnecting: false,\n                    walletState,\n                    error: null\n                });\n            } catch (error) {\n                set({\n                    isConnecting: false,\n                    error: error instanceof Error ? error.message : \"Failed to connect wallet\"\n                });\n                throw error;\n            }\n        },\n        disconnect: async ()=>{\n            set({\n                isConnected: false,\n                walletState: null,\n                error: null\n            });\n        },\n        refreshState: async ()=>{\n            const { isConnected } = get();\n            if (isConnected) {\n            // Refresh wallet state logic here\n            }\n        },\n        clearError: ()=>{\n            set({\n                error: null\n            });\n        }\n    })) // Global type declarations removed - using official types from @midnight-ntwrk/dapp-connector-api\n;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvc3RvcmVzL3dhbGxldFN0b3JlLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWdDO0FBMkJ6QixNQUFNQyxpQkFBaUJELCtDQUFNQSxDQUFjLENBQUNFLEtBQUtDLE1BQVM7UUFDL0QsZ0JBQWdCO1FBQ2hCQyxhQUFhO1FBQ2JDLGNBQWM7UUFDZEMsYUFBYTtRQUNiQyxPQUFPO1FBRVAsVUFBVTtRQUNWQyxTQUFTO1lBQ1BOLElBQUk7Z0JBQUVHLGNBQWM7Z0JBQU1FLE9BQU87WUFBSztZQUV0QyxJQUFJO29CQUVvQ0U7Z0JBRHRDLDZDQUE2QztnQkFDN0MsSUFBSSxNQUFrQixJQUFlLEdBQUNBLG1CQUFBQSxPQUFPQyxRQUFRLGNBQWZELHVDQUFBQSxpQkFBaUJFLE1BQU0sR0FBRTtvQkFDN0QsTUFBTSxJQUFJQyxNQUFNO2dCQUNsQjtnQkFFQSxNQUFNQyxNQUFNSixPQUFPQyxRQUFRLENBQUNDLE1BQU07Z0JBRWxDLDJCQUEyQjtnQkFDM0IsTUFBTUcsWUFBWSxNQUFNRCxJQUFJQyxTQUFTO2dCQUVyQyxJQUFJLENBQUNBLFdBQVc7b0JBQ2QscUJBQXFCO29CQUNyQixNQUFNRCxJQUFJRSxNQUFNO2dCQUNsQjtnQkFFQSxtQkFBbUI7Z0JBQ25CLE1BQU1ULGNBQTJCO29CQUMvQlUsU0FBUztvQkFDVEMsV0FBVztvQkFDWEMsU0FBUztvQkFDVEMsVUFBVSxFQUFFO29CQUNaZixhQUFhO29CQUNiZ0IsVUFBVTtnQkFDWjtnQkFFQWxCLElBQUk7b0JBQ0ZFLGFBQWE7b0JBQ2JDLGNBQWM7b0JBQ2RDO29CQUNBQyxPQUFPO2dCQUNUO1lBQ0YsRUFBRSxPQUFPQSxPQUFPO2dCQUNkTCxJQUFJO29CQUNGRyxjQUFjO29CQUNkRSxPQUFPQSxpQkFBaUJLLFFBQVFMLE1BQU1jLE9BQU8sR0FBRztnQkFDbEQ7Z0JBQ0EsTUFBTWQ7WUFDUjtRQUNGO1FBRUFlLFlBQVk7WUFDVnBCLElBQUk7Z0JBQ0ZFLGFBQWE7Z0JBQ2JFLGFBQWE7Z0JBQ2JDLE9BQU87WUFDVDtRQUNGO1FBRUFnQixjQUFjO1lBQ1osTUFBTSxFQUFFbkIsV0FBVyxFQUFFLEdBQUdEO1lBQ3hCLElBQUlDLGFBQWE7WUFDZixrQ0FBa0M7WUFDcEM7UUFDRjtRQUVBb0IsWUFBWTtZQUNWdEIsSUFBSTtnQkFBRUssT0FBTztZQUFLO1FBQ3BCO0lBQ0YsSUFFQSxrR0FBa0c7Q0FGL0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2xpYi9zdG9yZXMvd2FsbGV0U3RvcmUudHM/NjU2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGUgfSBmcm9tICd6dXN0YW5kJ1xyXG5cclxuaW50ZXJmYWNlIFdhbGxldFN0YXRlIHtcclxuICBhZGRyZXNzOiBzdHJpbmcgfCBudWxsXHJcbiAgcHVibGljS2V5OiBzdHJpbmcgfCBudWxsXHJcbiAgY2hhaW5JZDogc3RyaW5nXHJcbiAgYmFsYW5jZXM6IGFueVtdXHJcbiAgaXNDb25uZWN0ZWQ6IGJvb2xlYW5cclxuICBpc0xvY2tlZDogYm9vbGVhblxyXG59XHJcblxyXG5pbnRlcmZhY2UgV2FsbGV0U3RvcmUge1xyXG4gIC8vIFN0YXRlXHJcbiAgaXNDb25uZWN0ZWQ6IGJvb2xlYW5cclxuICBpc0Nvbm5lY3Rpbmc6IGJvb2xlYW5cclxuICB3YWxsZXRTdGF0ZTogV2FsbGV0U3RhdGUgfCBudWxsXHJcbiAgaGFzQ29tcGxldGVkT25ib2FyZGluZzogYm9vbGVhbjtcclxuICBzZXRIYXNDb21wbGV0ZWRPbmJvYXJkaW5nOiAoc3RhdHVzOiBib29sZWFuKSA9PiB2b2lkO1xyXG4gIGVycm9yOiBzdHJpbmcgfCBudWxsXHJcbiAgXHJcbiAgLy8gQWN0aW9uc1xyXG4gIGNvbm5lY3Q6ICgpID0+IFByb21pc2U8dm9pZD5cclxuICBkaXNjb25uZWN0OiAoKSA9PiBQcm9taXNlPHZvaWQ+XHJcbiAgcmVmcmVzaFN0YXRlOiAoKSA9PiBQcm9taXNlPHZvaWQ+XHJcbiAgY2xlYXJFcnJvcjogKCkgPT4gdm9pZFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgdXNlV2FsbGV0U3RvcmUgPSBjcmVhdGU8V2FsbGV0U3RvcmU+KChzZXQsIGdldCkgPT4gKHtcclxuICAvLyBJbml0aWFsIHN0YXRlXHJcbiAgaXNDb25uZWN0ZWQ6IGZhbHNlLFxyXG4gIGlzQ29ubmVjdGluZzogZmFsc2UsXHJcbiAgd2FsbGV0U3RhdGU6IG51bGwsXHJcbiAgZXJyb3I6IG51bGwsXHJcblxyXG4gIC8vIEFjdGlvbnNcclxuICBjb25uZWN0OiBhc3luYyAoKSA9PiB7XHJcbiAgICBzZXQoeyBpc0Nvbm5lY3Rpbmc6IHRydWUsIGVycm9yOiBudWxsIH0pXHJcbiAgICBcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIENoZWNrIGlmIE1pZG5pZ2h0IExhY2Ugd2FsbGV0IGlzIGF2YWlsYWJsZVxyXG4gICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIXdpbmRvdy5taWRuaWdodD8ubW5MYWNlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaWRuaWdodCBMYWNlIHdhbGxldCBub3QgZm91bmQuIFBsZWFzZSBpbnN0YWxsIHRoZSBleHRlbnNpb24uJylcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgYXBpID0gd2luZG93Lm1pZG5pZ2h0Lm1uTGFjZVxyXG4gICAgICBcclxuICAgICAgLy8gQ2hlY2sgaWYgYWxyZWFkeSBlbmFibGVkXHJcbiAgICAgIGNvbnN0IGlzRW5hYmxlZCA9IGF3YWl0IGFwaS5pc0VuYWJsZWQoKVxyXG4gICAgICBcclxuICAgICAgaWYgKCFpc0VuYWJsZWQpIHtcclxuICAgICAgICAvLyBSZXF1ZXN0IHBlcm1pc3Npb25cclxuICAgICAgICBhd2FpdCBhcGkuZW5hYmxlKClcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gR2V0IHdhbGxldCBzdGF0ZVxyXG4gICAgICBjb25zdCB3YWxsZXRTdGF0ZTogV2FsbGV0U3RhdGUgPSB7XHJcbiAgICAgICAgYWRkcmVzczogJ21pZG5pZ2h0MTIzNC4uLjU2NzgnLCAvLyBQbGFjZWhvbGRlclxyXG4gICAgICAgIHB1YmxpY0tleTogbnVsbCxcclxuICAgICAgICBjaGFpbklkOiAnbWlkbmlnaHQtdGVzdG5ldCcsXHJcbiAgICAgICAgYmFsYW5jZXM6IFtdLFxyXG4gICAgICAgIGlzQ29ubmVjdGVkOiB0cnVlLFxyXG4gICAgICAgIGlzTG9ja2VkOiBmYWxzZSxcclxuICAgICAgfVxyXG5cclxuICAgICAgc2V0KHsgXHJcbiAgICAgICAgaXNDb25uZWN0ZWQ6IHRydWUsIFxyXG4gICAgICAgIGlzQ29ubmVjdGluZzogZmFsc2UsIFxyXG4gICAgICAgIHdhbGxldFN0YXRlLFxyXG4gICAgICAgIGVycm9yOiBudWxsIFxyXG4gICAgICB9KVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgc2V0KHsgXHJcbiAgICAgICAgaXNDb25uZWN0aW5nOiBmYWxzZSwgXHJcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ZhaWxlZCB0byBjb25uZWN0IHdhbGxldCcgXHJcbiAgICAgIH0pXHJcbiAgICAgIHRocm93IGVycm9yXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgZGlzY29ubmVjdDogYXN5bmMgKCkgPT4ge1xyXG4gICAgc2V0KHsgXHJcbiAgICAgIGlzQ29ubmVjdGVkOiBmYWxzZSwgXHJcbiAgICAgIHdhbGxldFN0YXRlOiBudWxsLCBcclxuICAgICAgZXJyb3I6IG51bGwgXHJcbiAgICB9KVxyXG4gIH0sXHJcblxyXG4gIHJlZnJlc2hTdGF0ZTogYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBpc0Nvbm5lY3RlZCB9ID0gZ2V0KClcclxuICAgIGlmIChpc0Nvbm5lY3RlZCkge1xyXG4gICAgICAvLyBSZWZyZXNoIHdhbGxldCBzdGF0ZSBsb2dpYyBoZXJlXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgY2xlYXJFcnJvcjogKCkgPT4ge1xyXG4gICAgc2V0KHsgZXJyb3I6IG51bGwgfSlcclxuICB9LFxyXG59KSlcclxuXHJcbi8vIEdsb2JhbCB0eXBlIGRlY2xhcmF0aW9ucyByZW1vdmVkIC0gdXNpbmcgb2ZmaWNpYWwgdHlwZXMgZnJvbSBAbWlkbmlnaHQtbnR3cmsvZGFwcC1jb25uZWN0b3ItYXBpIl0sIm5hbWVzIjpbImNyZWF0ZSIsInVzZVdhbGxldFN0b3JlIiwic2V0IiwiZ2V0IiwiaXNDb25uZWN0ZWQiLCJpc0Nvbm5lY3RpbmciLCJ3YWxsZXRTdGF0ZSIsImVycm9yIiwiY29ubmVjdCIsIndpbmRvdyIsIm1pZG5pZ2h0IiwibW5MYWNlIiwiRXJyb3IiLCJhcGkiLCJpc0VuYWJsZWQiLCJlbmFibGUiLCJhZGRyZXNzIiwicHVibGljS2V5IiwiY2hhaW5JZCIsImJhbGFuY2VzIiwiaXNMb2NrZWQiLCJtZXNzYWdlIiwiZGlzY29ubmVjdCIsInJlZnJlc2hTdGF0ZSIsImNsZWFyRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/stores/walletStore.ts\n"));

/***/ })

});