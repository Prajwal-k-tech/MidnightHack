"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_services_faceVerificationService_ts"],{

/***/ "(app-pages-browser)/./src/lib/services/faceVerificationService.ts":
/*!*****************************************************!*\
  !*** ./src/lib/services/faceVerificationService.ts ***!
  \*****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FaceVerificationService: function() { return /* binding */ FaceVerificationService; },\n/* harmony export */   faceVerificationService: function() { return /* binding */ faceVerificationService; }\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ FaceVerificationService,faceVerificationService auto */ class FaceVerificationService {\n    /**\n   * Start camera for face capture\n   */ async startCamera(videoElement) {\n        try {\n            if (typeof navigator === \"undefined\" || !navigator.mediaDevices) {\n                throw new Error(\"Camera access not available in this environment\");\n            }\n            console.log(\"\\uD83D\\uDCF8 Starting camera for face verification...\");\n            this.videoStream = await navigator.mediaDevices.getUserMedia({\n                video: {\n                    width: {\n                        ideal: 640\n                    },\n                    height: {\n                        ideal: 480\n                    },\n                    facingMode: \"user\"\n                }\n            });\n            videoElement.srcObject = this.videoStream;\n            console.log(\"✅ Camera started successfully\");\n        } catch (error) {\n            console.error(\"❌ Camera access denied:\", error);\n            throw new Error(\"Camera access is required for face verification\");\n        }\n    }\n    /**\n   * Stop camera stream\n   */ stopCamera() {\n        if (this.videoStream) {\n            this.videoStream.getTracks().forEach((track)=>track.stop());\n            this.videoStream = null;\n            console.log(\"\\uD83D\\uDCF8 Camera stopped\");\n        }\n    }\n    /**\n   * Capture face image from video stream\n   */ captureFace(videoElement) {\n        if (!this.canvas || !this.context) {\n            console.error(\"Canvas not initialized - service must be used in browser\");\n            return null;\n        }\n        this.canvas.width = videoElement.videoWidth;\n        this.canvas.height = videoElement.videoHeight;\n        // Draw current video frame to canvas\n        this.context.drawImage(videoElement, 0, 0);\n        // Get image data\n        const imageDataUrl = this.canvas.toDataURL(\"image/jpeg\", 0.8);\n        console.log(\"\\uD83D\\uDCF8 Face captured\");\n        return {\n            imageDataUrl,\n            confidence: 0.95,\n            timestamp: Date.now()\n        };\n    }\n    /**\n   * 🔒 GENERATE BIOMETRIC HASH (Privacy-Preserving)\n   * Creates a cryptographic commitment to facial features\n   * without storing the actual biometric data\n   */ async generateBiometricHash(faceData) {\n        console.log(\"\\uD83D\\uDD10 Generating biometric hash...\");\n        // Simulate advanced biometric feature extraction\n        await new Promise((resolve)=>setTimeout(resolve, 2000));\n        // In production, this would use:\n        // 1. Face detection (MediaPipe, OpenCV)\n        // 2. Feature extraction (embeddings)\n        // 3. Cryptographic hashing of features\n        // For demo: create hash from image data\n        const buffer = new TextEncoder().encode(faceData.imageDataUrl);\n        const hashBuffer = await crypto.subtle.digest(\"SHA-256\", buffer);\n        const hashArray = Array.from(new Uint8Array(hashBuffer));\n        const hashHex = hashArray.map((b)=>b.toString(16).padStart(2, \"0\")).join(\"\");\n        console.log(\"✅ Biometric hash generated:\", hashHex.substring(0, 16) + \"...\");\n        return hashHex;\n    }\n    /**\n   * 🔒 VERIFY FACE MATCH (Zero-Knowledge)\n   * Proves two faces match without revealing biometric data\n   */ async verifyFaceMatch(currentFace, storedBiometricHash) {\n        console.log(\"\\uD83D\\uDD10 Starting ZK biometric verification...\");\n        // Generate hash for current face\n        const currentHash = await this.generateBiometricHash(currentFace);\n        // Simulate ZK proof generation\n        console.log(\"\\uD83E\\uDDEE Generating zero-knowledge proof...\");\n        await new Promise((resolve)=>setTimeout(resolve, 1500));\n        // In production, this would:\n        // 1. Compare biometric features in ZK circuit\n        // 2. Generate proof of match/no-match\n        // 3. Not reveal the actual biometric data\n        // For demo: check hash similarity (simulating feature matching)\n        const similarity = this.calculateHashSimilarity(currentHash, storedBiometricHash);\n        const isVerified = similarity > 0.85; // 85% similarity threshold\n        const proof = {\n            isVerified,\n            confidenceScore: similarity,\n            biometricHash: currentHash,\n            proofGenerated: true\n        };\n        console.log(\"✅ Biometric verification complete:\", {\n            verified: isVerified,\n            confidence: \"\".concat(Math.round(similarity * 100), \"%\")\n        });\n        return proof;\n    }\n    /**\n   * Calculate similarity between two biometric hashes\n   * (In production, this would be in a ZK circuit)\n   */ calculateHashSimilarity(hash1, hash2) {\n        if (hash1 === hash2) return 1.0;\n        // Simple similarity based on hash prefix matching\n        let matches = 0;\n        const compareLength = Math.min(hash1.length, hash2.length, 16);\n        for(let i = 0; i < compareLength; i++){\n            if (hash1[i] === hash2[i]) matches++;\n        }\n        return matches / compareLength;\n    }\n    /**\n   * 🔐 ANONYMOUS FACE VERIFICATION\n   * Verify face authenticity without identity linkage\n   */ async verifyFaceAuthenticity(faceData) {\n        console.log(\"\\uD83D\\uDD0D Verifying face authenticity...\");\n        // Simulate liveness detection and anti-spoofing\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        // In production, this would check:\n        // - Face liveness (eye blinks, head movement)\n        // - Anti-spoofing (3D face detection)\n        // - Image quality assessment\n        const result = {\n            isRealPerson: faceData.confidence > 0.8,\n            isLive: faceData.confidence > 0.9,\n            qualityScore: faceData.confidence\n        };\n        console.log(\"✅ Authenticity verification:\", result);\n        return result;\n    }\n    constructor(){\n        this.canvas = null;\n        this.context = null;\n        this.stream = null;\n        this.videoStream = null;\n        // Only initialize in browser environment\n        if ( true && typeof document !== \"undefined\") {\n            this.canvas = document.createElement(\"canvas\");\n            this.context = this.canvas.getContext(\"2d\");\n        }\n    }\n}\nconst faceVerificationService = new FaceVerificationService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/services/faceVerificationService.ts\n"));

/***/ })

}]);